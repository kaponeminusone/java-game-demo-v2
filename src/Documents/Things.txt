

//------------------------------------------------

    Funcionalidad de este fragmento de codigo es principalmente, hacer que se pueda ajustar
    los JPanel de la mejor forma en la Ventana (JFRAME).

import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import javax.swing.GroupLayout.Alignment;

    pane = new JPanel();
        
    pane.setPreferredSize(new Dimension(400,600));
    pane.setSize(400,600);
    pane.setBackground(Color.GRAY);

    GroupLayout pane1 = new GroupLayout(pane);
    pane.setLayout(pane1);
    pane1.setHorizontalGroup(pane1.createParallelGroup(Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
    pane1.setVerticalGroup(pane1.createParallelGroup(Alignment.LEADING).addGap(0, 600, Short.MAX_VALUE));

    layout.setHorizontalGroup(
        layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pane,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
                    // .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pane2,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                        
    );

    layout.setVerticalGroup(
        layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(pane,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)
                        .addComponent(pane2,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
    );

El 'addComponent' lo que logra hacer es acomodar todo dependiendo a las dimensiones PREFERIDAS Y DEFAULT que le asignemos.
sin ella se autoajustan de manera incorrecta.

La jerarquia vendria siendo de Añadir componentes simultaneamentes.

//------------------------------------------------


//------------------------------------------------

Gracias a esto, se puede añadir un componente MouseAdapter al PANEL, el cual tiene la posibilidad del mouseDragged
esto sin necesidad de que se cree una clase aparte.

import java.awt.event.MouseListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

    pane = new JPanel();
        
    pane.setPreferredSize(new Dimension(400,600));
    pane.setSize(400,600);
    pane.setBackground(Color.GRAY); 

    MouseAdapter one = new MouseAdapter(){
            
        public void mouseClicked(MouseEvent e){

            System.out.println("Click (" + e.getX() + "," + e.getY() + ")");

        }

        public void mouseDragged(MouseEvent e){
                
            System.out.println(e.getX());
                
        }
            
    };

    pane.addMouseListener(one);
    pane.addMouseMotionListener(one);

//---------------------------------------------------
